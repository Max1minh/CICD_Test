# Based on the need to create a setup to apply a workflow based on the Git Feature Branch, we will basically create 2 workflows , the "Pull Requests CI" that will start when there is a new pull request for Master or release branch, checking if the tests pass, running build and generating an APK that will be stored in Github Artifacts for functional tests of a new feature or bug developed and the "Master Release CI" that will run when there is an update in the Master or branch of release, making the same checks but this time sending the release APK to Firebase App Distribution.

name: Pull Requests CI

on:
  pull_request:
    branches:
      - 'master'
      - 'release*'
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# A workflow is composed of one or more Jobs that can be executed sequentially or in parallel
jobs:
  # This Workflow contains two Jobs called "test" and "build-and-deploy"
  test:
    name: Run Unit Tests
    # The type of runner the job will run on
    runs-on: ubuntu-latest
    # Steps represent the sequence of tasks using shell runners that will be executed as part of the Job
    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Unit tests
      run: bash ./gradlew test --stacktrace
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  build-and-generate-apk:
    # The type of runner the job will run on
    runs-on: ubuntu-latest
    # Steps represent the sequence of tasks using shell runners that will be executed as part of the Job
    steps:
    - uses: actions/checkout@v1
    # Step to Configure the JDK
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8       
    # Step to install the NDK
    - name: Install NDK
      run: echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;20.0.5594570"
    # Step to Build the Project and generate the APK
    - name: Build Debug 
      run: ./gradlew assembleDebug
    # Step to save the APK as Artifacts
    - name: Upload APK on Build Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: app
        path: app/build/outputs/apk/debug/app-debug.apk 
